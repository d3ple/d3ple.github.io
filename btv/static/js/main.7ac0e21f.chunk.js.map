{"version":3,"sources":["service.js","App.js","serviceWorker.js","index.js"],"names":["apiService","require","create","baseURL","headers","Modal","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","color","width","App","useState","profile","setProfile","isDelayModalOpen","setIsDelayModalOpen","key","setKey","delay","setDelay","firstBtnOnMain","useRef","firstBtnOnDelay","useCallback","node","focus","useEffect","get","then","response","console","log","data","current","window","addEventListener","onKeyPress","removeEventListener","closeDelayModal","className","contract_number","balance","keyCode","message","ref","onClick","post","disabled","isOpen","style","contentLabel","align","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7ac0e21f.chunk.js","sourcesContent":["const axios = require('axios');\n\nexport const apiService = axios.create({\n    baseURL: 'http://new-lk-btv.onekone-dev.x.eltc.ru/api/btv/',\n    headers: {'X-Btv-Api-Key': 'WTHXVgw49X4yyr3vmanhaa6daeRtkDp9jvf86TLf'}\n  });\n\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { apiService } from \"./service\"\nimport \"./App.scss\"\nimport Modal from 'react-modal';\n\nModal.setAppElement('#root');\n\nconst customStyles = {\n  content : {\n    top                   : '50%',\n    left                  : '50%',\n    right                 : 'auto',\n    bottom                : 'auto',\n    marginRight           : '-50%',\n    transform             : 'translate(-50%, -50%)',\n    color: 'black',\n    width: '50%'\n  }\n};\n\nconst App = () => {\n  const [profile, setProfile] = useState({});\n  const [isDelayModalOpen, setIsDelayModalOpen] = useState(false);\n  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);\n\n  const [key, setKey] = useState(null);\n  const [delay, setDelay] = useState(null);\n\n  const firstBtnOnMain = useRef(null);\n  const firstBtnOnDelay = useCallback(node => {\n    if (node !== null) {\n        node.focus();\n    }\n}, []);\n\n  useEffect(() => {\n    apiService.get('info').then(response => {\n      console.log(response.data)\n      setProfile(response.data);\n    });\n\n    firstBtnOnMain.current.focus();\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('keydown', onKeyPress);\n    return () => window.removeEventListener(\"keydown\", onKeyPress);\n  }, [])\n\n \n\n\n  const onKeyPress = (key) => {\n    setKey(key);\n    console.log(key);\n  }\n\n  const activateDelay = () => {\n    apiService.post('defer').then(response => {\n      console.log(response.data);\n      setDelay(response.data);\n      closeDelayModal();\n    })\n  }\n\n  const openDelayModal = () => {\n    setIsDelayModalOpen(true);\n    // console.log(firstBtnOnDelay.current)\n    // firstBtnOnDelay.current.focus();\n  }\n\n  const closeDelayModal = () => {\n    setIsDelayModalOpen(false);\n  }\n\n  const clickPayment = () => {\n    apiService.post('payment', {\n      \"money\": 999,\n      \"enable_autopay\": false\n    }).then(response => {\n      console.log(response.data)\n    })\n  }\n\n  return (\n    <main className=\"content\">\n      <div className=\"row row--header\">\n        <div className=\"column column--left\">\n          <span className=\"profile__info\">\n            Договор: { profile.contract_number }\n          </span>\n          <span className=\"profile__info\">\n            Баланс: { profile.balance }\n          </span>\n          <span className=\"profile__info\">\n            Клавиша: { key && key.key + ' - ' + key.keyCode }\n          </span>\n          <span className=\"profile__info\">\n            Отсрочка: { delay ? delay.message : 'Нет' }\n          </span>\n        </div>\n        <div className=\"column column--right\">\n          <span className=\"profile__title\">\n            Профиль ♥\n          </span>\n        </div>\n      </div>\n\n      <div className=\"row row--actions\">\n        <div className=\"column column--centered\">\n          <button \n            className={`profile__button ${profile.balance < 0 && 'profile__button--warning'}`}\n            ref={firstBtnOnMain}\n            onClick={clickPayment}\n            disabled={isDelayModalOpen}\n            >\n              Пополнение баланса\n            </button>\n          <button \n            className=\"profile__button\" \n            onClick={openDelayModal}\n            disabled={isDelayModalOpen}\n          >\n              Отсрочка платежа\n            </button>\n            <Modal\n              isOpen={isDelayModalOpen}\n              style={customStyles}\n              contentLabel=\"Example Modal\"\n             >\n                <div className=\"modal__text\">\n                  Вы действительно хотите взять отсрочку?\n                </div>\n                <div className=\"modal__buttons-row\">\n                  <button \n                    ref={firstBtnOnDelay}\n                    onClick={closeDelayModal}\n                    className=\"modal__modal-btn\">\n                      Отмена\n                  </button>\n                  <button \n                    onClick={activateDelay}\n                    className=\"modal__modal-btn\">\n                      Да\n                  </button>\n                </div>\n            </Modal>\n        </div>\n        <div className=\"column\">\n          <span className=\"profile__payment-info\">\n            Ежемесячный платеж: 1000.34\n          </span>\n          <table className=\"profile__payment-table\">\n            <thead>\n            <tr>\n              <th>Сумма / руб</th>\n              <th>Услуга</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td align=\"middle\">700</td>\n              <td>Абонентская плата</td>\n            </tr>\n            <tr>\n              <td align=\"middle\">160</td>\n              <td>Предоставление услуги БТВ (приставка абонента)</td>\n            </tr>\n            <tr>\n              <td align=\"middle\">700</td>\n              <td>Подписка на каналы - Пакет Детский</td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}