{"version":3,"sources":["service.js","App.js","serviceWorker.js","index.js"],"names":["apiService","require","create","baseURL","headers","Modal","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","color","width","minHeight","App","useState","key","setKey","useEffect","window","addEventListener","onKeyPress","removeEventListener","console","log","firstBtnOnMain","useRef","profile","setProfile","get","then","response","data","current","focus","delay","setDelay","isDelayModalOpen","setIsDelayModalOpen","firstBtnOnDelay","useCallback","node","closeDelayModal","isPaymentModalOpen","setIsPaymentModalOpen","firstBtnOnPayment","areButtonsOnMainDisabled","isAutopay","setIsAutopay","className","contract_number","balance","keyCode","message","ref","onClick","disabled","isOpen","style","contentLabel","htmlFor","id","type","String","onChange","event","target","checked","post","money","enable_autopay","setTimeout","align","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4e5fdc61.chunk.js","sourcesContent":["const axios = require('axios');\n\nexport const apiService = axios.create({\n    baseURL: 'http://new-lk-btv.onekone-dev.x.eltc.ru/api/btv/',\n    headers: {'X-Btv-Api-Key': 'WTHXVgw49X4yyr3vmanhaa6daeRtkDp9jvf86TLf'}\n  });\n\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { apiService } from \"./service\";\nimport \"./App.scss\";\nimport Modal from \"react-modal\";\n\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    color: \"black\",\n    width: \"50%\",\n    minHeight: \"30%\",\n  },\n};\n\nconst App = () => {\n  // клавиатура\n  const [key, setKey] = useState(null);\n  useEffect(() => {\n    window.addEventListener(\"keydown\", onKeyPress);\n    return () => window.removeEventListener(\"keydown\", onKeyPress);\n  }, []);\n\n  const onKeyPress = (key) => {\n    setKey(key);\n    console.log(key);\n  };\n\n  // номер счета и задолженость\n  const firstBtnOnMain = useRef(null);\n  const [profile, setProfile] = useState({});\n  useEffect(() => {\n    apiService.get(\"info\").then((response) => {\n      console.log(response.data);\n      setProfile(response.data);\n    });\n\n    firstBtnOnMain.current.focus();\n  }, []);\n\n  // отсрочка\n  const [delay, setDelay] = useState(null);\n  const [isDelayModalOpen, setIsDelayModalOpen] = useState(false);\n\n  const activateDelay = () => {\n    apiService.post(\"defer\").then((response) => {\n      console.log(response.data);\n      setDelay(response.data);\n\n      setTimeout(() => {\n        closeDelayModal();\n        setDelay(null);\n      }, 4000);\n    });\n  };\n\n  const firstBtnOnDelay = useCallback((node) => {\n    if (node !== null) {\n      node.focus();\n    }\n  }, []);\n\n  const openDelayModal = () => {\n    setIsDelayModalOpen(true);\n  };\n\n  const closeDelayModal = () => {\n    setIsDelayModalOpen(false);\n  };\n\n  // оплата\n  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(true);\n  const clickPayment = () => {\n    apiService\n      .post(\"payment\", {\n        money: 999,\n        enable_autopay: false,\n      })\n      .then((response) => {\n        console.log(response.data);\n      });\n  };\n\n  const firstBtnOnPayment = useCallback((node) => {\n    if (node !== null) {\n      node.focus();\n    }\n  }, []);\n\n  const openPaymentModal = () => {\n    setIsPaymentModalOpen(true);\n  };\n\n  const closePaymentModal = () => {\n    setIsPaymentModalOpen(false);\n  };\n\n  // \n  const areButtonsOnMainDisabled = () => {\n    return isDelayModalOpen || isPaymentModalOpen;\n  };\n\n\n  //\n  const [isAutopay, setIsAutopay] = useState(false);\n\n  const toogleAutopay = (event) => {\n    console.log(event.target.checked)\n    setIsAutopay(event.target.checked);\n  }\n\n  return (\n    <main className=\"content\">\n      <div className=\"row row--header\">\n        <div className=\"column column--left\">\n          <span className=\"profile__info\">\n            Договор: {profile.contract_number}\n          </span>\n          <span className=\"profile__info\">Баланс: {profile.balance}</span>\n          <span className=\"profile__info\">\n            Клавиша: {key && key.key + \" - \" + key.keyCode}\n          </span>\n          <span className=\"profile__info\">\n            Отсрочка: {delay ? delay.message : \"Нет\"}\n          </span>\n        </div>\n        <div className=\"column column--right\">\n          <span className=\"profile__title\">Профиль ♥</span>\n        </div>\n      </div>\n\n      <div className=\"row row--actions\">\n        <div className=\"column column--centered\">\n          <button\n            className={`profile__button ${\n              profile.balance < 0 && \"profile__button--warning\"\n            } ${areButtonsOnMainDisabled() && \"disabled\"}`}\n            ref={firstBtnOnMain}\n            onClick={openPaymentModal}\n            disabled={areButtonsOnMainDisabled()}\n          >\n            Пополнение баланса\n          </button>\n          <Modal\n            isOpen={isPaymentModalOpen}\n            style={customStyles}\n            contentLabel=\"Example Modal\"\n          >\n            <div className=\"modal__payment-text\">\n              <b>Чтобы пополнить счёт:</b>\n              <br />\n              Введите сумму и нажмите «Оплатить». Следуйте инструкциям платёжной системы.\n            </div>\n\n            <div className=\"modal__inputs-row\">\n              <div>\n                <label htmlFor=\"sum\">Сумма платежа</label>\n                <input id=\"sum\" type=\"number\" className=\"modal__input\" />\n                <span className=\"modal__money-tip\">руб.</span>\n                <input id=\"sum\" type=\"number\" className=\"modal__input\" />\n                <span className=\"modal__money-tip\">коп.</span>\n              </div>\n\n              <div className=\"modal__autopay-wrap\">\n                <label htmlFor=\"auto\">Подключить автоплатеж { String(isAutopay) } </label>\n                <input onChange={toogleAutopay} type=\"checkbox\" id=\"auto\" />\n              </div>\n            </div>\n\n            <div className=\"modal__buttons-row\">\n              <button\n                ref={firstBtnOnPayment}\n                onClick={closePaymentModal}\n                className=\"modal__modal-btn\"\n              >\n                Отмена\n              </button>\n              <button onClick={clickPayment} className=\"modal__modal-btn\">\n                Оплатить\n              </button>\n            </div>\n          </Modal>\n\n          <button\n            className={`profile__button ${areButtonsOnMainDisabled() && \"disabled\"}`}\n            onClick={openDelayModal}\n            disabled={areButtonsOnMainDisabled()}\n          >\n            Отсрочка платежа\n          </button>\n\n          <Modal\n            isOpen={isDelayModalOpen}\n            style={customStyles}\n            contentLabel=\"Example Modal\"\n          >\n            {delay !== null ? (\n              <div className=\"modal__response\">{delay.message}</div>\n            ) : (\n              <>\n                <div className=\"modal__text\">\n                  Вы действительно хотите взять отсрочку?\n                </div>\n                <div className=\"modal__buttons-row\">\n                  <button\n                    ref={firstBtnOnDelay}\n                    onClick={closeDelayModal}\n                    className=\"modal__modal-btn\"\n                  >\n                    Отмена\n                  </button>\n                  <button onClick={activateDelay} className=\"modal__modal-btn\">\n                    Да\n                  </button>\n                </div>\n              </>\n            )}\n          </Modal>\n        </div>\n        <div className=\"column\">\n          <span className=\"profile__payment-info\">\n            Ежемесячный платеж: 1000.34\n          </span>\n          <table className=\"profile__payment-table\">\n            <thead>\n              <tr>\n                <th>Сумма / руб</th>\n                <th>Услуга</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td align=\"middle\">700</td>\n                <td>Абонентская плата</td>\n              </tr>\n              <tr>\n                <td align=\"middle\">160</td>\n                <td>Предоставление услуги БТВ (приставка абонента)</td>\n              </tr>\n              <tr>\n                <td align=\"middle\">700</td>\n                <td>Подписка на каналы - Пакет Детский</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}