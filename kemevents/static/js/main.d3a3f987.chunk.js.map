{"version":3,"sources":["vkApi.js","crapList.js","Separator.js","Event.js","LoadingOverlay.js","App.js","serviceWorker.js","index.js"],"names":["token","WeekSeparator","className","FutureSeparator","Event","image","title","date","status","isSoon","link","soonStatus","href","src","alt","LoadingOverlay","isLoading","role","aria-label","App","useState","setIsLoading","idList","setIdList","events","setEvents","useEffect","a","fetchJsonp","response","json","result","console","log","items","map","event","id","error","fetchData","idListWithoutCrap","filter","crapList","includes","groupsIds","join","sort","anotherEvent","start_date","length","isEventSoon","currentDate","Date","nextWeek","addWeeks","isAfter","fromUnixTime","index","key","name","screen_name","photo_200","activity","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAAMA,EACJ,wFCDa,GACb,UACA,SACA,UACA,UACA,UACA,WCHWC,G,KAAgB,WAC3B,OACE,yBAAKC,UAAW,+BAAhB,gFAMSC,EAAkB,WAC7B,OACE,yBAAKD,UAAW,mCAAhB,mCCMWE,EAhBD,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC7CC,EAAaF,EAAS,SAAW,aACvC,OACE,uBAAGG,KAAI,yBAAoBF,GAAQR,UAAW,kCAAoCS,GAChF,yBAAKT,UAAU,gBACb,yBAAKA,UAAU,cAAcW,IAAKR,EAAOS,IAAI,UAE/C,yBAAKZ,UAAU,eACb,yBAAKA,UAAU,cAAcK,GAC7B,yBAAKL,UAAU,cAAcI,GAC7B,yBAAKJ,UAAU,gBAAgBM,MCCxBO,EAXe,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAE/B,OACE,yBAAKd,UAAWc,EAAY,2BAA6B,WACvD,0BAAMd,UAAU,eAAee,KAAK,MAAMC,aAAW,QAArD,kBCmFSC,G,MA/EH,WAAO,IAAD,EACkBC,oBAAS,GAD3B,mBACTJ,EADS,KACEK,EADF,OAEYD,mBAAS,IAFrB,mBAETE,EAFS,KAEDC,EAFC,OAGYH,mBAAS,IAHrB,mBAGTI,EAHS,KAGDC,EAHC,KAKhBC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,6DAChBN,GAAa,GADG,kBAGOO,ILVD,4EAPV,IAOU,oBANb,KAMa,mBALL,IAKK,kBAJL,KAIK,yBACwI5B,EADxI,cARZ,SKeM,cAGV6B,EAHU,gBAIKA,EAASC,OAJd,OAIVC,EAJU,OAKdC,QAAQC,IAAIF,GACZR,EAAUQ,EAAOF,SAASK,MAAMC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,OANrC,kDAQdL,QAAQM,MAAR,MARc,0DAAH,qDAWfC,KACC,IAEHb,qBAAU,WACR,IAAMa,EAAS,uCAAG,kCAAAZ,EAAA,sEAERa,EAAoBlB,EAAOmB,QAAO,SAAAJ,GAAE,OAAKK,EAASC,SAASN,MAFnD,SAGOT,KLtBAgB,EKuBLJ,EAAkBK,OLvBJ,6DACkBD,EADlB,mBALpC,kKAKoC,yBACkE5C,EADlE,cAXtB,UK8BM,cAGV6B,EAHU,gBAMKA,EAASC,OANd,OAMVC,EANU,OAORP,EAASO,EAAOF,SAASiB,MAC7B,SAACV,EAAOW,GAAR,OAAyBX,EAAMY,WAAaD,EAAaC,cAE3DvB,EAAUD,GAVI,kDAYdQ,QAAQM,MAAR,MAZc,yBAcdjB,GAAa,GAdC,+CLnBO,IAAAuB,IKmBP,2BAAH,qDAkBftB,EAAO2B,QAAUV,MAChB,CAACjB,IAEJ,IAAM4B,EAAc,SAAA3C,GAClB,IAAM4C,EAAc,IAAIC,KAClBC,EAAWC,YAASH,EAAa,GACvC,OAAQI,YAAQC,YAAajD,GAAO8C,IAGtC,OACE,oCACE,yBAAKnD,UAAU,SAAf,8CACA,kBAAC,EAAD,CAAgBc,UAAWA,IAC3B,yBAAKd,UAAU,aACb,kBAAC,EAAD,MACCsB,EAAOW,KAAI,SAACC,EAAOqB,GAAR,OACV,yBAAKC,IAAKtB,EAAMC,IACd,kBAAC,EAAD,CACEqB,IAAKtB,EAAMC,GACX/B,MAAO8B,EAAMuB,KACbjD,KAAM0B,EAAMwB,YACZvD,MAAO+B,EAAMyB,UACbtD,KAAM6B,EAAM0B,SACZtD,OAAQ4B,EAAM5B,OACdC,OAAQyC,EAAYd,EAAMY,cAE3BxB,EAAOiC,EAAQ,IAChBP,EAAY1B,EAAOiC,EAAQ,GAAGT,cAC5BE,EAAYd,EAAMY,YAClB,kBAAC,EAAD,MAEA,WCrEMe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d3a3f987.chunk.js","sourcesContent":["const token =\n  \"210f022b937c167c25c48a5fada123e7d2b785aaed6e106f96a85c5d895e6b48f4aa3d916786b75b74152\";\nconst version = \"5.58\";\nconst countryId = \"1\";\nconst cityId = \"64\";\nconst isFutureEvents = \"1\";\nconst numberOfEvents = \"50\";\nconst eventFields =\n  \"description,age_limits,city,cover,links,members_count,place,public_date_label,start_date,finish_date,status,activity,main_section,public_date_label,site,status\";\n\nexport const searchMethod = () =>\n  `https://api.vk.com/method/groups.search?type=event&q=*&country_id=${countryId}&city_id=${cityId}&future=${isFutureEvents}&count=${numberOfEvents}&access_token=${token}&v=${version}`;\n\nexport const getByIdMethod = groupsIds =>\n  `https://api.vk.com/method/groups.getById?group_ids=${groupsIds}&fields=${eventFields}&access_token=${token}&v=${version}`;\n","export default [\n  116828815,\n  97035114,\n  101563208,\n  127365226,\n  158392471,\n  103762911\n];\n","import React from \"react\";\nimport \"./App.scss\";\n\nexport const WeekSeparator = () => {\n  return (\n    <div className={\"date-break date-break--soon\"}>\n      –ù–ê –≠–¢–û–ô –ù–ï–î–ï–õ–ï\n    </div>\n  );\n};\n\nexport const FutureSeparator = () => {\n  return (\n    <div className={\"date-break date-break--not-soon\"}>–ü–û–ó–ñ–ï</div>\n  );\n};\n","import React from \"react\";\nimport \"./App.scss\";\n\nconst Event = ({ image, title, date, status, isSoon, link }) => {\n  const soonStatus = isSoon ? \"--soon\" : \"--not-soon\";\n  return (\n    <a href={`https://vk.com/${link}`} className={\"event-container event-container\" + soonStatus}>\n      <div className=\"image-column\">\n        <img className=\"event-image\" src={image} alt='logo'/>\n      </div>\n      <div className=\"info-column\">\n        <div className=\"event-date\">{date}</div>\n        <div className=\"event-name\">{title}</div>\n        <div className=\"event-status\">{status}</div>\n      </div>\n    </a>\n  );\n};\n\nexport default Event;\n","import React from \"react\";\nimport \"./App.scss\";\n\nexport const LoadingOverlay = ({ isLoading }) => {\n\n  return (\n    <div className={isLoading ? \"overlay overlay--loading\" : \"overlay\"}>\n      <span className=\"overlay-logo\" role=\"img\" aria-label=\"logo\">\n        üé≠\n      </span>\n    </div>\n  );\n};\n\nexport default LoadingOverlay;\n","import React, { useState, useEffect } from \"react\";\nimport { addWeeks, isAfter, fromUnixTime } from \"date-fns\";\nimport fetchJsonp from \"fetch-jsonp\";\nimport { searchMethod, getByIdMethod } from \"./vkApi\";\nimport crapList from \"./crapList\";\nimport { WeekSeparator, FutureSeparator } from \"./Separator\";\nimport Event from \"./Event\";\nimport LoadingOverlay from \"./LoadingOverlay\";\nimport \"normalize.css\";\nimport \"./App.scss\";\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [idList, setIdList] = useState([]);\n  const [events, setEvents] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        let response = await fetchJsonp(searchMethod());\n        let result = await response.json();\n        console.log(result);\n        setIdList(result.response.items.map(event => event.id));\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const idListWithoutCrap = idList.filter(id => !crapList.includes(id));\n        let response = await fetchJsonp(\n          getByIdMethod(idListWithoutCrap.join())\n        );\n        let result = await response.json();\n        const events = result.response.sort(\n          (event, anotherEvent) => event.start_date - anotherEvent.start_date\n        );\n        setEvents(events);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    idList.length && fetchData();\n  }, [idList]);\n\n  const isEventSoon = date => {\n    const currentDate = new Date();\n    const nextWeek = addWeeks(currentDate, 1);\n    return !isAfter(fromUnixTime(date), nextWeek);\n  };\n\n  return (\n    <>\n      <div className=\"title\">–°–û–ë–´–¢–ò–Ø</div>\n      <LoadingOverlay isLoading={isLoading} />\n      <div className=\"container\">\n        <WeekSeparator />\n        {events.map((event, index) => (\n          <div key={event.id}>\n            <Event\n              key={event.id}\n              title={event.name}\n              link={event.screen_name}\n              image={event.photo_200}\n              date={event.activity}\n              status={event.status}\n              isSoon={isEventSoon(event.start_date)}\n            />\n            {events[index + 1] &&\n            isEventSoon(events[index + 1].start_date) !==\n              isEventSoon(event.start_date) ? (\n              <FutureSeparator />\n            ) : (\n              \"\"\n            )}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}