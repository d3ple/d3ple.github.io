stages:
  - prepare
  - test
  - sonar
  - prepare_build
  - build
  - deploy
  - healthcheck
  - post_deploy

default:
  image: harbor.eltc.ru/docker_hub_cache/library/node:14
  tags:
    - k8s

include:
  # Настройки ssh
  - project: 'ci-libraries/gitlab-ci-yml-library'
    ref: master
    file: 'SSH.gitlab-ci.yml'
  # Aнализ в sonarqube
  - project: 'ci-libraries/gitlab-ci-yml-library'
    ref: master
    file: 'SONAR.gitlab-ci.yml'

variables:
  SSH_DIR: "/docker/app/react"
  SKIP_UNIT: "true"     # Не запускать unit-тесты
  SKIP_SONAR: "true"    # Не запускать анализ в SonarQube
  #SKIP_BUILD: "true"    # Не запускать сборку

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_BRANCH'

cache:
  key: ${CI_COMMIT_REF_SLUG}
  policy: pull-push
  paths:
    - .yarn
    - node_modules

Dependencies:
  stage: prepare
  script:
    - echo "PROJECT_VERSION=$(node -p "require('./package.json').version")" >> build.env
    - yarn install
  artifacts:
    expire_in: 1 day
    reports:
      dotenv: build.env
  rules:
    - if: '$SKIP_BUILD'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^hotfix\/.*|release\/.*|develop$/ || $DEPLOY_STAGING'
      when: on_success

Build:
  stage: build
  variables:
    NODE_OPTIONS: '--max-old-space-size=4096'
  script:
    - CI=false yarn build
  artifacts:
    expire_in: 1 day
    paths:
      - dist
  rules:
    - if: '$SKIP_BUILD'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^hotfix\/.*|release\/.*|develop$/ || $DEPLOY_STAGING'
      when: on_success

Deploy:
  stage: deploy
  tags:
    - jenkins-deployer
  extends:
    - .deploy-ssh
  needs:
    - job: Build
      artifacts: true
  cache: {}
  environment:
    name: "staging"
    url: "http://${STAGE_URL}"
  variables:
    SSH_URL: "jenkins@$STAGE_URL"
  script:
    - ssh ${SSH_URL} "ls -lahs ${SSH_DIR}"
    - rsync -avz ./dist/* ${SSH_URL}:${SSH_DIR}
    - ssh ${SSH_URL} "ls -lahs ${SSH_DIR}"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^hotfix\/.*|release\/.*|develop$/ || $DEPLOY_STAGING'
      when: on_success

Release:
  stage: deploy
  tags:
    - jenkins-deployer
  extends:
    - .deploy-ssh
  cache: {}
  environment:
    name: "production"
    url: "http://${PROD_URL}"
  variables:
    STAGE_SSH_URL: "jenkins@$STAGE_URL"
    PROD_SSH_URL: "jenkins@$PROD_URL"
  script:
    - echo "$SSH_PRIVATE_KEY_PROD" | tr -d '\r' | ssh-add - > /dev/null
    - rsync -avz ${STAGE_SSH_URL}:${SSH_DIR}/* ./dist
    - ls -lahs ./dist
    - ssh ${PROD_SSH_URL} "ls -lahs ${SSH_DIR}"
    - rsync -avz ./dist/* ${PROD_SSH_URL}:${SSH_DIR}
    - ssh ${PROD_SSH_URL} "ls -lahs ${SSH_DIR}"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^master$/ || $CI_COMMIT_BRANCH =~ /^main$/ || $DEPLOY_PROD'
      when: manual

